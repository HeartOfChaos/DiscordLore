package org.github.heartofchaos;

import org.bukkit.ChatColor;
import org.bukkit.command.CommandSender;
import org.bukkit.configuration.file.YamlConfiguration;
import org.bukkit.configuration.serialization.ConfigurationSerialization;
import org.bukkit.entity.Player;
import org.bukkit.event.Listener;
import org.bukkit.plugin.java.JavaPlugin;
import org.github.heartofchaos.cmds.Commands;
import org.github.heartofchaos.cmds.DiscordCommands;
import org.github.heartofchaos.utilities.GuiHandler;
import org.github.heartofchaos.utilities.LoreParser;
import org.github.heartofchaos.utilities.MessageLore;
import org.github.heartofchaos.utilities.UsersAndAccounts;
import org.javacord.api.DiscordApi;
import org.javacord.api.DiscordApiBuilder;
import org.javacord.api.entity.permission.Permissions;
import org.javacord.api.interaction.*;

import java.io.File;
import java.util.*;

public class Main extends JavaPlugin {

    static {
        ConfigurationSerialization.registerClass(MessageLore.class, "MessageLore");
    }

    //Use to get the discord ID of a player. Add to it upon successful password link.
    public static Map<Integer, Player> playerCodes = new HashMap<Integer, Player>();
    public static Map<Integer, Player> playerFromDiscordID = new HashMap<Integer, Player>();
    public static Map<Player, Integer> discordIDFromPlayer = new HashMap<Player, Integer>();
    //Use this to get the discord ID of a player
    public static Map<Player, Integer> playerLinks = new HashMap<Player, Integer>();
    /*Add all lore a player sends to an arraylist keyed to their Player.
    In the arraylist, add all edits to the lore queue, saving old versions. Add a gui option
    to delete lore. Store the number of the lore arraylist in a NamespacedKey on the persistentdata
    storage of the Lore display pane. You can use this to delete it.*/
    public static Map<Player, ArrayList<ArrayList>> playerLore = new HashMap<Player, ArrayList<ArrayList>>();
    //Add the messages a player has linked lore to into this map, and when a message is edited,
    // check if it has a key in here and then send that lore to all the players in the player array.
    public static Map<Integer, ArrayList> messagePlayer = new HashMap<Integer, ArrayList>();

    //Two methods. addMessage(Integer messageID), and addPlayersToMessage(Integer messageID, Player player)

    DiscordApi api;

    public DiscordApi getApi() {
        return api;
    }


    void registerInteractionCommands() {
        /*SlashCommand command =
                SlashCommand.with("lore", "The command used for the Discord Lore bot.", Arrays.asList(
                        SlashCommandOption.create(SlashCommandOptionType.LONG,"link", "Use with a code generated by /dlore link to link your minecraft account to MCLoreBot.")
                        ))
                        .createGlobal(api)
                        .join();*/

    }

    void startApi(){

        this.api = new DiscordApiBuilder().setToken(getConfig().getString("BotToken")).login().join();
        api.addListener(new DiscordCommands(this));
        //Slash command code
        api.addSlashCommandCreateListener(event -> {
            SlashCommandInteraction slashCommandInteraction = event.getSlashCommandInteraction();
            Optional<Long> args = slashCommandInteraction.getOptionLongValueByIndex(0);
            System.out.println(args.toString());

        });

        //These three lines add a context menu option for when a message is right-clicked that the bot can see
        MessageContextMenuBuilder loreMenu = new MessageContextMenuBuilder();
        loreMenu.setName("Queue as Lore");
        loreMenu.createGlobal(api);

        //Creates a listener to fire when the context menu option is selected
        api.addMessageContextMenuCommandListener(event ->{

            if (!event.getMessageContextMenuInteraction().getCommandName().equalsIgnoreCase("Queue as Lore")) return;
            Long messageID = event.getMessageContextMenuInteraction().getTarget().getId();
            Long userID = event.getInteraction().getUser().getId();

            //Code that fires upon the lorequeue option being selected
            //Creates the datahandler to interact with the configs that store data
            UsersAndAccounts dataHandler = new UsersAndAccounts(this);
            //This creates an object to save and add to the queue.
            LoreParser loreParser = new LoreParser(this);
            ArrayList<String> newLore = loreParser.parseLoreFormat(event.getMessageContextMenuInteraction().getTarget().getContent());

            ArrayList<ArrayList<String>> newArray = new ArrayList<ArrayList<String>>();
            newArray.add(newLore);
            newArray.addAll(dataHandler.getUserLore(userID));

            YamlConfiguration accountConfig = dataHandler.getAccountConfig(userID);
            File accountFile = dataHandler.getAccountFile(userID);
            //Returns if it's not the Queue as Lore option being selected

            //Creates the new list of lore which will be saved to the accountConfig, overwriting the old.
            //Serializes the lore, which can later be retrieved by deserializing it.

            //Gets the account config and then saves the new lore to it.
            accountConfig.set("LoreQueue", newArray);
            dataHandler.saveConfig(accountFile, accountConfig);
            //Sets a responder so that the User can see when their command has gone through.
            event.getMessageContextMenuInteraction().createImmediateResponder().setContent("Message added!").respond();
        });

        registerInteractionCommands();
    }

    public void startBot(CommandSender sender) {

        try {
            sender.sendMessage(ChatColor.DARK_GREEN + "Starting your Discord bot...");
            startApi();
            getLogger().info("Connected to Discord as " + api.getYourself().getDiscriminatedName());
            System.out.println("Your Discord bot is active! Use this link to add it to a server: " + api.createBotInvite());
            sender.sendMessage(ChatColor.GREEN + "Your discord bot is active! Use this link to add it to a server: " + ChatColor.YELLOW
                    + api.createBotInvite(Permissions.fromBitmask(68608)));
        } catch (Exception error) {
            if (sender.equals(null)) {
                return;
            }
            sender.sendMessage("Make sure that the Discord bot token is correct.");
        }

    }

    public void stopBot(CommandSender sender) {
        api.disconnect();
        api = null;
        System.out.println("Your discord bot is no longer active!");
        sender.sendMessage(ChatColor.GREEN + "Your Discord bot is no longer active!");
    }

    public void createConfigs() {

        File pluginConfigFile = new File(this.getDataFolder() + File.separator + "LoreBotConfig.yml");
        File pluginDataStorageFile = new File(this.getDataFolder() + File.separator + "LoreBotDataStorage.yml");

        if (!pluginConfigFile.exists()) {
            YamlConfiguration pluginConfig = YamlConfiguration.loadConfiguration(pluginConfigFile);
            pluginConfig.set("BotToken", "{Put Token Here}");
            pluginConfig.set("ConnectOnStart", true);
            try {
                pluginConfig.save(pluginConfigFile);
            } catch (Exception error) {
                error.printStackTrace();
            }
        }

        if (!pluginDataStorageFile.exists()) {
            YamlConfiguration pluginStorageConfig = YamlConfiguration.loadConfiguration(pluginDataStorageFile);
            pluginStorageConfig.set("Messages", new ArrayList<Player>());
            try {
                pluginStorageConfig.save(pluginDataStorageFile);
            } catch (Exception error) {
                error.printStackTrace();
            }
        }

    }

    public YamlConfiguration getConfig() {
        createConfigs();
        File pluginConfigFile = new File(this.getDataFolder() + File.separator + "LoreBotConfig.yml");
        YamlConfiguration pluginConfig = YamlConfiguration.loadConfiguration(pluginConfigFile);

        return pluginConfig;
    }

    public YamlConfiguration getDataConfig() {
        createConfigs();
        File pluginDataFile = new File(this.getDataFolder() + File.separator + "LoreBotDataStorage.yml");
        YamlConfiguration pluginDataConfig = YamlConfiguration.loadConfiguration(pluginDataFile);

        return pluginDataConfig;
    }

    public File getConfigFile() {
        createConfigs();
        File pluginConfigFile = new File(this.getDataFolder() + File.separator + "LoreBotConfig.yml");
        return pluginConfigFile;
    }

    @Override
    public void onEnable() {
        createConfigs();
        getCommand("dlore").setExecutor(new Commands(this));

//        getServer().getPluginManager().registerEvents(new UserDataHandler(this), this);
        if (getConfig().isSet("ConnectOnStart")) {
            if (getConfig().get("ConnectOnStart").equals(true)) {
                try {
                    startApi();
                    System.out.println(ChatColor.GREEN + "Connected to Discord as " + ChatColor.YELLOW + api.getYourself().getDiscriminatedName());
                } catch (Exception error) {
                    System.out.println(ChatColor.RED + "Start bot on server load was set to true, but there was an error. Have you set the bot's token?");
                    error.printStackTrace();
                }
            }
        }
        getServer().getPluginManager().registerEvents((Listener) new GuiHandler(this), this);
    }
    @Override
    public void onDisable() {
        // Plugin shutdown logic
        api.disconnect();
        api = null;
    }


}